{"version":3,"file":"DCATClient.js","sourceRoot":"","sources":["DCATClient.ts"],"names":[],"mappings":";;;AACA,yDAAqD;AAGrD,MAAa,UAAU;IAGnB;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,0BAAW,EAAE,CAAC;IACpC,CAAC;IACD,KAAK,CAAC,UAAU,CAAC,KAA2B,EAAE,WAAwB;QAClE,IAAI,4BAA4B,GAAG;;;;;;;;;;;aAW9B,CAAC;QACN,IAAI,KAAK,CAAC,YAAY;YAAE,4BAA4B,IAAI,0BAA0B,KAAK,CAAC,YAAY,KAAK,CAAC;QAC1G,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE;YAC7C,4BAA4B,IAAI,wBAAwB,CAAA;YACxD,KAAK,MAAM,CAAC,IAAI,KAAK,CAAC,UAAU,EAAE;gBAC9B,4BAA4B,IAAI;+CACD,CAAC;mCACb,CAAA;aACtB;SACJ;QACD,4BAA4B,IAAI,GAAG,CAAA;QACnC,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QAEzC,6BAA6B;QAC7B,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,OAAO,EAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,CAAA,CAAC,CAAC,CAAC,CAAC;QAC1E,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,4BAA4B,EAAE;YACjF,OAAO,EAAoC,OAAO;SACrD,CAAC,CAAC;QACH,uCAAuC;QACvC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,OAAO,EAAE,CAAC;QAE9C,MAAM,mBAAmB,GAAgB,EAAE,CAAC;QAC5C,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;YACpB,aAAa;YACb,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE;gBACvD,aAAa;gBACb,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;gBACnC,mBAAmB,CAAC,IAAI,CAAC;oBACrB,aAAa;oBACb,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK;iBAC/B,CAAC,CAAC;aACN;SACJ;QAED,OAAO,mBAAmB,CAAC;IAC/B,CAAC;CACJ;AAtDD,gCAsDC","sourcesContent":["import {DataSources, ISourceSelection, SourceSelectionQuery} from \"../types/ISourceSelection\";\r\nimport { QueryEngine } from '@comunica/query-sparql';\r\nimport { IDataSource} from \"@comunica/types\";\r\n\r\nexport class DCATClient implements ISourceSelection {\r\n    public engine: QueryEngine;\r\n\r\n    constructor() {\r\n        this.engine = new QueryEngine();\r\n    }\r\n    async getSources(query: SourceSelectionQuery, entrypoints: DataSources): Promise<DataSources> {\r\n        let sourceSelectionQueryInSparql = `\r\n            PREFIX tree: <https://w3id.org/tree#>\r\n            PREFIX dcat: <http://www.w3.org/ns/dcat#>\r\n            PREFIX sh: <https://www.w3.org/ns/shacl#>\r\n            select DISTINCT ?source\r\n            where {\r\n                ?dataset a dcat:Dataset .\r\n                ?service dcat:servesdataset ?dataset ;\r\n                         dcat:endpointURL ?source .\r\n                ?dataset tree:shape ?shape .      \r\n                          \r\n            `;\r\n        if (query.typeOfEntity) sourceSelectionQueryInSparql += `?shape sh:targetClass <${query.typeOfEntity}> .`;\r\n        if (query.properties && query.properties.length) {\r\n            sourceSelectionQueryInSparql += `?shape a sh:NodeShape;`\r\n            for (const p of query.properties) {\r\n                sourceSelectionQueryInSparql += `sh:property [\r\n                                    sh:path <${p}>\r\n                                ];`\r\n            }\r\n        }\r\n        sourceSelectionQueryInSparql += `}`\r\n        console.log(sourceSelectionQueryInSparql)\r\n\r\n        // Only use value of a source\r\n        const sources = entrypoints.map(value => { return {value: value.value} });\r\n        const bindingsStream = await this.engine.queryBindings(sourceSelectionQueryInSparql, {\r\n            sources: <[IDataSource, ...IDataSource[]]> sources\r\n        });\r\n        // Consume results as an array (easier)\r\n        const result = await bindingsStream.toArray();\r\n\r\n        const relevantDatasources: DataSources = [];\r\n        for (const r of result) {\r\n            // @ts-ignore\r\n            if (r.get('source') != undefined && r.get('source').value) {\r\n                // @ts-ignore\r\n                console.log(r.get('source').value);\r\n                relevantDatasources.push({\r\n                    // @ts-ignore\r\n                    value: r.get('source').value\r\n                });\r\n            }\r\n        }\r\n\r\n        return relevantDatasources;\r\n    }\r\n}\r\n"]}