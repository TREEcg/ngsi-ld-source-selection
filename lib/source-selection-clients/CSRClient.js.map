{"version":3,"file":"CSRClient.js","sourceRoot":"","sources":["CSRClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {DataSources, ISourceSelection, SourceSelectionQuery} from \"../types/ISourceSelection\";\r\nimport {JsonLdParser} from \"jsonld-streaming-parser\";\r\nimport {makeSureTrailingSlash} from \"../utils/utils\";\r\nimport * as RDF from 'rdf-js';\r\nconst streamifyString = require('streamify-string');\r\nimport {DataFactory} from \"rdf-data-factory\";\r\nconst DF = new DataFactory<RDF.BaseQuad>();\r\n\r\n\r\nexport class CSRClient implements ISourceSelection {\r\n    quadStreamToQuadArray = async (input: RDF.Stream) : Promise<RDF.Quad[]> => {\r\n        return new Promise((resolve, reject) => {\r\n            const quads : RDF.Quad[] = []\r\n            input\r\n                .on('data', (quad) => {quads.push(quad)})\r\n                .on('error', (error) => reject(new Error(`Error parsing notification body.\\n${error.message}`)))\r\n                .on('end', () => resolve(quads));\r\n        })\r\n    }\r\n\r\n    async getSources(query: SourceSelectionQuery, entrypoints: DataSources): Promise<DataSources> {\r\n        const relevantSources: DataSources = [];\r\n        let store: RDF.Quad[] = [];\r\n        for (const cat of entrypoints) {\r\n            const csrEndpoint = makeSureTrailingSlash(cat.value);\r\n            let csrRequest = csrEndpoint;\r\n            if (query.typeOfEntity) csrRequest += '?type=' + encodeURIComponent(query.typeOfEntity);\r\n            csrRequest += '&attrs=';\r\n\r\n            if (query.properties?.length) {\r\n                for (const p of query.properties) {\r\n                    csrRequest += encodeURIComponent(p) + \",\";\r\n                }\r\n            }\r\n            console.log(csrRequest);\r\n            try {\r\n               const res = await fetch(csrRequest!, {\r\n                   headers: {\r\n                       'Accept': 'application/ld+json'\r\n                   }\r\n                });\r\n               const resJsonLd = await res.json();\r\n               console.log(resJsonLd)\r\n                const myParser = JsonLdParser.fromHttpResponse(\r\n                    csrRequest!,\r\n                    'application/ld+json'\r\n                );\r\n               console.log(myParser)\r\n                const data = myParser.import(streamifyString(JSON.stringify(resJsonLd)));\r\n                console.log(data);\r\n                const quads : RDF.Quad[] = await this.quadStreamToQuadArray(data);\r\n                console.log(quads);\r\n                const endpoints = quads\r\n                    .filter((quad) => quad.predicate.value === 'https://uri.etsi.org/ngsi-ld/endpoint')\r\n                    .map((quad) => { return { value: quad.object.value } });\r\n                console.log(\"Endpoints: \" + JSON.stringify(endpoints));\r\n                for (const e of endpoints) {\r\n                    // @ts-ignore\r\n                    if (e.value) {\r\n                        relevantSources.push({\r\n                            // @ts-ignore\r\n                            value: e.value\r\n                        });\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error('Failed to retrieve from CSR endpoint: ' + csrRequest);\r\n                console.error(e);\r\n            }\r\n        }\r\n        return relevantSources;\r\n    }\r\n}\r\n\r\n"]}