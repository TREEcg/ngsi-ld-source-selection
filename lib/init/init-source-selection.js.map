{"version":3,"file":"init-source-selection.js","sourceRoot":"","sources":["init-source-selection.ts"],"names":[],"mappings":";;;AACA,qEAAgE;AAChE,uEAAkE;AAElE,MAAa,mBAAmB;IAC5B,KAAK,CAAC,UAAU,CAAC,KAA2B,EAAE,WAAwB;QAClE,IAAI,eAAe,GAAgB,EAAE,CAAC;QACtC,MAAM,WAAW,GAAgB,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC;QACrG,MAAM,UAAU,GAAgB,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;QACnG,IAAI,UAAU,CAAC,MAAM,EAAE;YACnB,KAAK,IAAI,EAAE,IAAI,UAAU,EAAE;gBACvB,MAAM,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;gBAClC,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxD,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aACrD;SACJ;QACD,IAAI,WAAW,CAAC,MAAM,EAAE;YACpB,wCAAwC;YACxC,MAAM,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;YACpC,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAChE,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACrD;QAED,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AArBD,kDAqBC","sourcesContent":["import {DataSources, ISourceSelection, SourceSelectionQuery} from \"../types/ISourceSelection\";\r\nimport {CSRClient} from \"../source-selection-clients/CSRClient\";\r\nimport {DCATClient} from \"../source-selection-clients/DCATClient\";\r\n\r\nexport class InitSourceSelection implements ISourceSelection {\r\n    async getSources(query: SourceSelectionQuery, entrypoints: DataSources): Promise<DataSources> {\r\n        let relevantSources: DataSources = [];\r\n        const dcatSources: DataSources = entrypoints.filter((value) => value.type?.toLowerCase() === \"dcat\");\r\n        const csrSources: DataSources = entrypoints.filter((value => value.type?.toLowerCase() === \"csr\"));\r\n        if (csrSources.length) {\r\n            for (let ds of csrSources) {\r\n                const csrClient = new CSRClient();\r\n                const sources = await csrClient.getSources(query, [ds]);\r\n                relevantSources = relevantSources.concat(sources);\r\n            }\r\n        }\r\n        if (dcatSources.length) {\r\n            // All dcatSources are federated queried\r\n            const dcatClient = new DCATClient();\r\n            const sources = await dcatClient.getSources(query, dcatSources);\r\n            relevantSources = relevantSources.concat(sources);\r\n        }\r\n\r\n        return relevantSources;\r\n    }\r\n}\r\n"]}